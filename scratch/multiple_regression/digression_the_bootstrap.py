from typing import TypeVar, List, Callable
import random

from scratch.statistics.describing_a_single_set_of_data import median, standard_deviation

# Imagine that we have a sample of n data points, generated by some (unknown to 
# us) distribution:
# data = get_sample(num_points=n)

# In Chapter 5, we wrote a function that could compute the median of the sample,
# which we can use as an estimate of the median of the distribution itself.

# But how confident can we be about our estimate? If all the data points in the 
# sample are very close to 100, then it seems likely that the actual median is 
# close to 100.  If approximately half the data points in the sample are close 
# to 0 and the other half are close to 200, then we can’t be nearly as certain 
# about the median.

# If we could repeatedly get new samples, we could compute the medians of many 
# samples and look at the distribution of those medians.  Often we can’t. In 
# that case we can bootstrap new datasets by choosing n data points with 
# replacement from our data. And then we can compute the medians of those 
# synthetic datasets:

X = TypeVar("X") # Generic type for data
Stat = TypeVar("Stat") # Generic type for "statistic"

def bootstrap_sample(data: List[X]) -> List[X]:
    """
    randomly samples len(data) elements with replacement.
    """

    return [random.choice(data) for _ in data]

def bootstrap_statistic(data: List[X],
                        stats_fn: Callable[[List[X]], Stat],
                        num_samples: int) -> List[float]:
    """
    Evaluates stats_fn on num_samples bootstrap samples from data.
    """

    return [stats_fn(bootstrap_sample(data)) for _ in range(num_samples)]

# For example, consider the two following datasets:

# 101 points all very close to 100
close_to_100 = [99.5 + random.random() for _ in range(101)]

# 101 points, 50 of them near 0, 50 of them near 200
far_from_100 = ([99.5 + random.random()] +
                [random.random() for _ in range(50)] +
                [200 + random.random() for _ in range(50)])

# If you compute the medians of the two datasets, both will be very close to 100. 
# However, if you look at:

# medians_close = bootstrap_statistic(close_to_100, median, 100)
# you will mostly see numbers really close to 100. But if you look at:

# medians_far = bootstrap_statistic(far_from_100, median, 100)
# you will see a lot of numbers close to 0 and a lot of numbers close to 200.

# The standard_deviation of the first set of medians is close to 0, while that 
# of the second set of medians is close to 100:
# assert standard_deviation(medians_close) < 1
# assert standard_deviation(medians_far) > 90

# (This extreme a case would be pretty easy to figure out by manually inspecting 
# the data, but in general that won’t be true.)